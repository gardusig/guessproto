// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: proto/guess_service.proto

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GuessService_GuessNumber_FullMethodName = "/GuessService/GuessNumber"
	GuessService_OpenBox_FullMethodName     = "/GuessService/OpenBox"
)

// GuessServiceClient is the client API for GuessService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GuessServiceClient interface {
	GuessNumber(ctx context.Context, in *GuessNumberRequest, opts ...grpc.CallOption) (*GuessNumberResponse, error)
	OpenBox(ctx context.Context, in *LockedBox, opts ...grpc.CallOption) (*OpenedBox, error)
}

type guessServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGuessServiceClient(cc grpc.ClientConnInterface) GuessServiceClient {
	return &guessServiceClient{cc}
}

func (c *guessServiceClient) GuessNumber(ctx context.Context, in *GuessNumberRequest, opts ...grpc.CallOption) (*GuessNumberResponse, error) {
	out := new(GuessNumberResponse)
	err := c.cc.Invoke(ctx, GuessService_GuessNumber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guessServiceClient) OpenBox(ctx context.Context, in *LockedBox, opts ...grpc.CallOption) (*OpenedBox, error) {
	out := new(OpenedBox)
	err := c.cc.Invoke(ctx, GuessService_OpenBox_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GuessServiceServer is the server API for GuessService service.
// All implementations must embed UnimplementedGuessServiceServer
// for forward compatibility
type GuessServiceServer interface {
	GuessNumber(context.Context, *GuessNumberRequest) (*GuessNumberResponse, error)
	OpenBox(context.Context, *LockedBox) (*OpenedBox, error)
	mustEmbedUnimplementedGuessServiceServer()
}

// UnimplementedGuessServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGuessServiceServer struct {
}

func (UnimplementedGuessServiceServer) GuessNumber(context.Context, *GuessNumberRequest) (*GuessNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuessNumber not implemented")
}
func (UnimplementedGuessServiceServer) OpenBox(context.Context, *LockedBox) (*OpenedBox, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenBox not implemented")
}
func (UnimplementedGuessServiceServer) mustEmbedUnimplementedGuessServiceServer() {}

// UnsafeGuessServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GuessServiceServer will
// result in compilation errors.
type UnsafeGuessServiceServer interface {
	mustEmbedUnimplementedGuessServiceServer()
}

func RegisterGuessServiceServer(s grpc.ServiceRegistrar, srv GuessServiceServer) {
	s.RegisterService(&GuessService_ServiceDesc, srv)
}

func _GuessService_GuessNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuessNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuessServiceServer).GuessNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GuessService_GuessNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuessServiceServer).GuessNumber(ctx, req.(*GuessNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuessService_OpenBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockedBox)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuessServiceServer).OpenBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GuessService_OpenBox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuessServiceServer).OpenBox(ctx, req.(*LockedBox))
	}
	return interceptor(ctx, in, info, handler)
}

// GuessService_ServiceDesc is the grpc.ServiceDesc for GuessService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GuessService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GuessService",
	HandlerType: (*GuessServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GuessNumber",
			Handler:    _GuessService_GuessNumber_Handler,
		},
		{
			MethodName: "OpenBox",
			Handler:    _GuessService_OpenBox_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/guess_service.proto",
}
